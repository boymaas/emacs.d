#+TITLE: BMaas emacs config
#+OPTIONS: toc:2 num:nil ^:nil

* Personal emacs config

This org-file is an example of literal programming, emacs will load the org file
and untangles the file into a elisp source file to be loaded by emacs.


** Cl-lib
   :PROPERTIES:
   :CUSTOM_ID: cl-lib
   :END:

[[http://www.gnu.org/software/emacs/news/NEWS.24.3][Emacs 24.3]] renamed the Common Lisp emulation package from =cl= to =cl-lib=,
which causes some madness between different Emacs versions. The following hack
code has been tested on Emacs 24.2.1 and Emacs 24.3.50. Any bug report will be
appreciated.

#+NAME: cl-lib
#+BEGIN_SRC emacs-lisp
(when (version< emacs-version "24.3")
  (el-get 'sync '(cl-lib))
  (add-to-list 'load-path "~/.emacs.d/el-get/cl-lib"))
#+END_SRC

** Structure
   :PROPERTIES:
   :CUSTOM_ID: structure
   :END:
The =init.el= file is where everything begins. It is loaded
automatically by Emacs on startup, its sole purpose is to load the
elisp code embedded in this file.

* Implementation
  :PROPERTIES:
  :CUSTOM_ID: implementation
  :END:

** bmaas config basics

The core file will contain functions for loading other parts of my emacs
configuration. The elements I find important are the following:

- fast loading!
  this wil be done by using the following package:

    https://github.com/jwiegley/use-package

  #+BEGIN_QUOTE
    The use-package declaration macro allows you to isolate package configuration
    in your ".emacs" in a way that is performance-oriented and, well, just tidy.
    I created it because I have over 80 packages that I use in Emacs, and things
    were getting difficult to manage. Yet with this utility my total load time
    is just under 1 second, with no loss of functionality!
  #+END_QUOTE

- installing per module

   module files will consist out of installing packaes and configuring them

#+NAME: bmaas/install
#+BEGIN_SRC emacs-lisp
(defun bmaas/install (package-name package-init-func)
  "Add EL-GET-PACKAGE to `el-get-sources'. And configures el-get to run the package-init-funcation after successfull initiation"
   (add-to-list 'el-get-sources
                 `(:name ,package-name
                   :after (progn (,package-init-func)))))
#+END_SRC

#+NAME: bmaas/load-module
#+BEGIN_SRC emacs-lisp
(defun bmaas/load-module (module-path &rest header-or-tags)
  "Loads a literal module file, a module file groups different components together"

   ;; ensure el-get-sources is empty before loading module "*.org" files
   (setq el-get-sources nil)

   ;; enable git shallow clone to save time and bandwidth
   (setq el-get-git-shallow-clone t)

   (org-babel-load-file (bmaas/path module-path))

   (el-get 'sync (mapcar 'el-get-source-name el-get-sources)))
#+END_SRC

- some general functions I use throughout my config

#+NAME: bmaas/load-module
#+BEGIN_SRC emacs-lisp
(defun bmaas/noop ())

(defun bmaas/path (path)
   (expand-file-name path bmaas/home-dir))

#+END_SRC

** Core module loading

We only load the core module. All other modules are loaded when needed, this keeps startup time as fast as possible.

#+BEGIN_SRC emacs-lisp
(bmaas/load-module "core/basic.org")
(bmaas/load-module "core/completion.org")
(bmaas/load-module "core/gui.org")
(bmaas/load-module "core/keybindings.org")
(bmaas/load-module "core/miscs.org")
(bmaas/load-module "core/org.org")
(bmaas/load-module "core/writing.org")
(bmaas/load-module "core/evil.org")

(bmaas/load-module "core/org-custom.org")
#+END_SRC
