#+TITLE: Web
#+OPTIONS: toc:2 num:nil ^:nil

This module contains some packages for web development in Emacs.


* Basic css settings
  :PROPERTIES:
  :CUSTOM_ID: basic-css
  :END:

The builtin =css-mode= is derived from =fundamental-mode=, so we need an extra
hook to enable =linum-mode= in =css-mode=.

#+NAME: basic-css
#+BEGIN_SRC emacs-lisp :tangle yes
(setq css-indent-offset 2)

(add-hook 'css-mode-hook
          (lambda ()
            (linum-mode 1)))
#+END_SRC

* Web-mode
  :PROPERTIES:
  :CUSTOM_ID: web-mode
  :END:

#+BEGIN_QUOTE
web-mode.el is an emacs major mode for editing web templates aka HTML files
embedding parts (CSS/JavaScript) and blocks (pre rendered by client/server side
engines).

web-mode.el is compatible with many template engines: PHP, JSP, ASP, Django,
Twig, Jinja(2), ERB, FreeMarker, Velocity, Cheetah, Smarty, CTemplate,
Mustache, Blade, ErlyDTL, Go Template, Dust.js, Google Closure (soy), JSX, etc.
#+END_QUOTE

#+NAME: web-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(defun bmaas/web-mode-setup ()
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))

  (defun bmaas/web-mode-hook ()
    ;; indentation
    ;; HTML offset indentation
    (setq web-mode-markup-indent-offset 2)
    ;; CSS offset indentation
    (setq web-mode-code-indent-offset 2)
    ;; Script offset indentation (for JavaScript, Java, PHP, etc.)
    (setq web-mode-css-indent-offset 2)
    ;; HTML content indentation
    (setq web-mode-indent-style 2)

    ;; padding
    ;; For <style> parts
    (setq web-mode-style-padding 1)
    ;; For <script> parts
    (setq web-mode-script-padding 1)
    ;; For multi-line blocks
    (setq web-mode-block-padding 0))

  (add-hook 'web-mode-hook 'bmaas/web-mode-hook))

(bmaas/install 'web-mode 'bmaas/web-mode-setup)
#+END_SRC

* Less-css-mode
  :PROPERTIES:
  :CUSTOM_ID: less-css-mode
  :END:

Writing plain CSS is quite boring sometimes since CSS didn't support basic
programming techniques such as variables. Thus some nerds create some
programming languages which extend CSS with programming language features, and
"compiles" to css when it is necessary. [[http://www.lesscss.org/][LESS]] is one of them.

#+NAME: less-css-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(defun bmaas/less-css-mode-setup ()
  (setq less-css-compile-at-save t))

(when (executable-find "lessc")
  (bmaas/install 'less-css-mode 'bmaas/less-css-mode-setup))
#+END_SRC
* rainbow-mode
  :PROPERTIES:
  :CUSTOM_ID: rainbow-mode
  :END:

Colors is one of the main actors in CSS game. [[http://julien.danjou.info/projects/emacs-packages#rainbow-mode][rainbow-mode]] makes your life a
little [[http://blog.gabrielsaldana.org/easy-css-editing-with-emacs/][easier]] by making css colors more visible.

#+NAME: rainbow-mode
#+BEGIN_SRC emacs-lisp :tangle yes
(defun bmaas/rainbow-mode-setup ()
  (add-hook 'css-mode-hook 'rainbow-mode))

(bmaas/install 'rainbow-mode 'bmaas/rainbow-mode-setup)
#+END_SRC

* scss-mode
Sass is the most mature, stable, and powerful professional grade CSS extension language in the world.

#+begin_src emacs-lisp :tangle yes
(defun bmaas/scss-mode-setup ()
  (setq scss-compile-at-save nil))

(bmaas/install 'scss-mode 'bmaas/scss-mode-setup)
#+end_src

* haml-mode

Haml (HTML abstraction markup language) is based on one primary principle:
markup should be beautiful. It’s not just beauty for beauty’s sake either; Haml
accelerates and simplifies template creation down to veritable haiku.

#+begin_src emacs-lisp :tangle yes
(bmaas/install 'haml-mode 'bmaas/noop)
#+end_src

** flymake haml

An Emacs flymake handler for syntax-checking HAML source code.

#+begin_src emacs-lisp :tangle yes
(defun bmaas/flymake-haml-setup ()
  (add-hook 'haml-mode-hook 'flymake-haml-load))
(bmaas/install 'flymake-haml 'bmaas/flymake-haml-setup)
#+end_src
