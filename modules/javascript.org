#+TITLE: JavaScript
#+OPTIONS: toc:2 num:nil ^:nil

* js3-mode
  :PROPERTIES:
  :CUSTOM_ID: js3-mode
  :END:

#+NAME: js3-mode
#+BEGIN_SRC emacs-lisp
(defun bmaas/js3-mode-setup ()
  (add-hook 'js3-mode-hook
            (lambda ()
              (setq js3-auto-indent-p t
                    js3-curly-indent-offset 0
                    js3-enter-indents-newline t
                    js3-expr-indent-offset 2
                    js3-indent-on-enter-key t
                    js3-lazy-commas t
                    js3-lazy-dots t
                    js3-lazy-operators t
                    js3-paren-indent-offset 2
                    js3-square-indent-offset 4)
              (linum-mode 1)))

            ;; https://github.com/Fuco1/smartparens/issues/239
            ;; (defadvice js3-enter-key (after fix-sp-state activate)
            ;;   (setq sp-last-operation 'sp-self-insert))

            ;; (sp-local-pair 'js3-mode
            ;;                "{"
            ;;                nil
            ;;                :post-handlers
            ;;                '((bmaas/create-newline-and-enter-sexp js3-enter-key))))
  )

(bmaas/install 'js3-mode 'bmaas/js3-mode-setup)
#+END_SRC

* Coffeescript mode

#+NAME: coffeescript mode
#+BEGIN_SRC emacs-lisp :tangle yes
(defun bmaas/coffee-mode-hook ()
  (setq standard-indent 2)
  (setq tab-always-indent nil)
  (setq evil-shift-width 2))

(defun bmaas/coffee-mode-setup ()
  (setq coffee-tab-width 2)
  (setq coffee-indent-tabs-mode nil)

  (evil-define-key 'visual coffee-mode-map ";c" 'coffee-compile-region))

  (add-hook 'coffee-mode-hook 'bmaas/coffee-mode-hook)

(bmaas/install 'coffee-mode 'bmaas/coffee-mode-setup)
#+END_SRC

** Coffeescript extract class into a file

Working on projects I often find I want to extract certain classes to seperate
files. So this macro is the result. Select a class and you will be prompted for
a filename derived from the class name underscored. You selection will be
appended to the file.

#+begin_src emacs-lisp :tangle yes
(defun bmaas/string-camel->underscore (s &optional sep start)
  "Convert CamelCase string S to lower case with word separator SEP.
Default for SEP is a hyphen \"_\".

If third argument START is non-nil, convert words after that
index in STRING."
  (let ((case-fold-search nil))
    (while (string-match "[A-Z]" s (or start 1))
      (setq s (replace-match (concat (or sep "_")
                                     (downcase (match-string 0 s)))
                             t nil s)))
    (downcase s)))

(defun bmaas/coffee-sperate-class-in-file (start end)
  "Select a string beginning with a class \w+. The classname will be used to
generate a file-name which you can change at the prompt. The contents will be
  appended to the specified file. And an export clause will be added at the end."
  (interactive "r")
  (let ((contents (buffer-substring-no-properties start end))
        (regexp-class "class \\([a-zA-Z]+\\)"))
    (if (string-match-p regexp-class contents)
        (let* ((match (string-match regexp-class contents))
              (class-name (match-string 1 contents))
              (file-name (read-string "Filename: "
                                       (format "%s.coffee"
                                               (bmaas/string-camel->underscore class-name)))))
          (append-to-file contents nil file-name)
          (append-to-file "\n\nroot = exports ? this\n" nil file-name)
          (append-to-file (format "root.%s = %s\n" class-name class-name) nil file-name)
          (delete-region start end)
          (find-file file-name)))))
#+end_src


* Haxe mode

#+begin_src emacs-lisp

(defun bmaas/haxe-mode-setup ()
  (require 'haxe-mode)
  (defconst bmaas-haxe-style
    '("java" (c-offsets-alist . ((case-label . +)
                                 (arglist-intro . +)
                                 (arglist-cont-nonempty . 0)
                                 (arglist-close . 0)
                                 (cpp-macro . 0))))
    "Bmaas Haxe Programming Style")
  (add-hook 'haxe-mode-hook
            (function (lambda () (c-add-style "haxe" bmaas-haxe-style t))))
  (add-hook 'haxe-mode-hook
            (function
             (lambda ()
               (setq tab-width 4)
               (setq indent-tabs-mode t)
               (setq fill-column 80)
               (local-set-key [(return)] 'newline-and-indent)))))

(bmaas/install 'haxe-mode 'bmaas/haxe-mode-setup)
#+end_src
