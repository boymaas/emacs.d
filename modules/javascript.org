#+TITLE: JavaScript
#+OPTIONS: toc:2 num:nil ^:nil

As with python, there're many choices to do JavaScript programming in Emacs,
however, IMHO, none of them are perfect, and easy to use. I've spent weeks of
spare time to experience various emacs packages for JavaScript, and only
figured out a not too bad solution based on [[https://github.com/thomblake/js3-mode][js3-mode]], [[https://github.com/abicky/nodejs-repl.el][nodejs-repl]], and [[https://github.com/marijnh/tern][tern]].

* Prerequisites
  :PROPERTIES:
  :CUSTOM_ID: javascript-prerequisites
  :END:

#+NAME: javascript-prerequisites
#+CAPTION: Prerequisites for bmaas/javascript module
|        | Windows | Ubuntu/Debian/Mint | ArchLinux | Fedora | Mac OS X | Mandatory? |
|--------+---------+--------------------+-----------+--------+----------+------------|
| [[http://nodejs.org/][nodejs]] |         | nodejs             |           |        |          | Yes        |
| [[http://ternjs.net/][tern]]   |         | [npm]              | [npm]     | [npm]  | [npm]    | Yes        |

* El-get packages
  :PROPERTIES:
  :CUSTOM_ID: javascript-el-get-packages
  :END:

#+NAME: javascript-el-get-packages
#+CAPTION: El-get packages for bmaas/javascript module
|             | Description                             | Status   |
|-------------+-----------------------------------------+----------|
| [[https://github.com/thomblake/js3-mode][js3-mode]]    | A chimeric fork of js2-mode and js-mode | Required |
| [[https://github.com/defunkt/coffee-mode][coffee-mode]] | A great coffee script mode              | Required |

* js3-mode
  :PROPERTIES:
  :CUSTOM_ID: js3-mode
  :END:

As the author said, [[https://github.com/thomblake/js3-mode][js3-mode]] is a "A chimeric fork of js2-mode and
js-mode". The main advantage of js3-mode over js2-mode, IMHO, is its
indentation work as I expected. However, some third party packages depend on
js2-mode, so this is a trade-off. I'm familiar with the internals of js2-mode,
any discussion is welcomed if you prefer js2-mode over js3-mode.

And another small issue is, js3-mode bind the =RET= key to =js3-enter-key=,
which break smartparens's newline and indentation. I didn't figure out a good
way to solve this.

#+NAME: js3-mode
#+BEGIN_SRC emacs-lisp
(defun bmaas/js3-mode-setup ()
  (add-hook 'js3-mode-hook
            (lambda ()
              (setq js3-auto-indent-p t
                    js3-curly-indent-offset 0
                    js3-enter-indents-newline t
                    js3-expr-indent-offset 2
                    js3-indent-on-enter-key t
                    js3-lazy-commas t
                    js3-lazy-dots t
                    js3-lazy-operators t
                    js3-paren-indent-offset 2
                    js3-square-indent-offset 4)
              (linum-mode 1)))

            ;; https://github.com/Fuco1/smartparens/issues/239
            ;; (defadvice js3-enter-key (after fix-sp-state activate)
            ;;   (setq sp-last-operation 'sp-self-insert))

            ;; (sp-local-pair 'js3-mode
            ;;                "{"
            ;;                nil
            ;;                :post-handlers
            ;;                '((bmaas/create-newline-and-enter-sexp js3-enter-key))))
  )

(bmaas/install 'js3-mode 'bmaas/js3-mode-setup)
#+END_SRC

* Tern
  :PROPERTIES:
  :CUSTOM_ID: tern
  :END:

Tern is a stand-alone code-analysis engine for JavaScript. It is written in
JavaScript, and capable of running both on [[http://nodejs.org/][nodejs]] and in the browser.

IMHO, tern is really an awesome project, various editors including Emacs
provides tern support. The author of tern, [[http://marijnhaverbeke.nl/][Marijin Haverbeke]], is really a cool
guy, an excellent JavaScript/Lisp hacker. He is also a tech writer, the author
of "Eloquent JavaScript".

Tern is really cool, besides the parser, it even has type inference for
JavaScript. And it works both for browser and nodejs in an extensible way. For
example, to get completion for both nodejs and jquery, just put a
=.tern-project= file in your js project root directory, the content of this
=.tern-project= file is self-explained, see tern's [[http://ternjs.net/doc/manual.html#configuration][manual]] for tech details.

#+NAME: tern-project
#+BEGIN_SRC javascript
{
  "libs": [
    "browser",
    "jquery"
  ],
  "plugins": {
    "node": {}
  }
}
#+END_SRC

It is quite easy to setup and configure tern, the only thing you need to do is
=sudo npm install -g tern=. Enjoy the auto-completion support from tern and
auto-complete for JavaScript programming in Emacs.

#+NAME: tern
#+BEGIN_SRC emacs-lisp :tangle no
(defun bmaas/tern-setup ()
  (when (el-get-package-installed-p 'js2-mode)
    (add-hook 'js2-mode-hook (lambda () (tern-mode t))))
  (when (el-get-package-installed-p 'js3-mode)
    (add-hook 'js3-mode-hook (lambda () (tern-mode t))))
  (setq tern-command (cons (executable-find "tern") '()))
  (eval-after-load 'tern
    '(progn
       (require 'tern-auto-complete)
       (tern-ac-setup))))

(bmaas/install 'tern 'bmaas/tern-setup)
#+END_SRC

* Coffeescript mode

#+NAME: coffeescript mode
#+BEGIN_SRC emacs-lisp :tangle yes
(defun bmaas/coffee-mode-hook ()
  (setq standard-indent 2)
  (setq tab-always-indent nil)
  (setq evil-shift-width 2))

(defun bmaas/coffee-mode-setup ()
  (setq coffee-tab-width 2)
  (setq coffee-indent-tabs-mode nil)

  (evil-define-key 'visual coffee-mode-map ";c" 'coffee-compile-region))

  (add-hook 'coffee-mode-hook 'bmaas/coffee-mode-hook)

(bmaas/install 'coffee-mode 'bmaas/coffee-mode-setup)
#+END_SRC

** Coffeescript extract class into a file

Working on projects I often find I want to extract certain classes to seperate
files. So this macro is the result. Select a class and you will be prompted for
a filename derived from the class name underscored. You selection will be
appended to the file.

#+begin_src emacs-lisp :tangle yes
(defun bmaas/string-camel->underscore (s &optional sep start)
  "Convert CamelCase string S to lower case with word separator SEP.
Default for SEP is a hyphen \"_\".

If third argument START is non-nil, convert words after that
index in STRING."
  (let ((case-fold-search nil))
    (while (string-match "[A-Z]" s (or start 1))
      (setq s (replace-match (concat (or sep "_")
                                     (downcase (match-string 0 s)))
                             t nil s)))
    (downcase s)))

(defun bmaas/coffee-sperate-class-in-file (start end)
  "Select a string beginning with a class \w+. The classname will be used to
generate a file-name which you can change at the prompt. The contents will be
  appended to the specified file. And an export clause will be added at the end."
  (interactive "r")
  (let ((contents (buffer-substring-no-properties start end))
        (regexp-class "class \\([a-zA-Z]+\\)"))
    (if (string-match-p regexp-class contents)
        (let* ((match (string-match regexp-class contents))
              (class-name (match-string 1 contents))
              (file-name (read-string "Filename: "
                                       (format "%s.coffee"
                                               (bmaas/string-camel->underscore class-name)))))
          (append-to-file contents nil file-name)
          (append-to-file "\n\nroot = exports ? this\n" nil file-name)
          (append-to-file (format "root.%s = %s\n" class-name class-name) nil file-name)
          (delete-region start end)
          (find-file file-name)))))
#+end_src
