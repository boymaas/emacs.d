#+TITLE: Ruby
#+OPTIONS: toc:2 num:nil ^:nil

This is part of the [[https://github.com/xiaohanyu/oh-my-emacs][oh-my-emacs]].

* Ruby-mode
  :PROPERTIES:
  :CUSTOM_ID: ruby-mode
  :END:

The builtin =ruby-mode= in Emacs is quite simple, it just provides some simple
functions for font-locking, indentation and code navigation.

#+NAME: ruby-mode
#+BEGIN_SRC emacs-lisp
(defun bmaas/ruby-mode-setup ()
  ;; Ah, this huge auto-mode-alist list comes from emacs prelude
  (add-to-list 'auto-mode-alist '("\\.rake\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Rakefile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.ru\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Guardfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Capfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.thor\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Thorfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Vagrantfile\\'" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.jbuilder\\'" . ruby-mode)))

(bmaas/ruby-mode-setup)
#+END_SRC

* Inf-ruby
  :PROPERTIES:
  :CUSTOM_ID: inf-ruby
  :END:

#+NAME: inf-ruby
#+BEGIN_SRC emacs-lisp
(defun bmaas/inf-ruby-setup ()
  (require 'inf-ruby)
  (define-key inf-ruby-minor-mode-map (kbd "C-c C-z") 'run-ruby)
  (when (executable-find "pry")
    (add-to-list 'inf-ruby-implementations '("pry" . "pry"))
    (setq inf-ruby-default-implementation "pry")))

(bmaas/install 'inf-ruby 'bmaas/inf-ruby-setup)
#+END_SRC

* Robe-mode
  :PROPERTIES:
  :CUSTOM_ID: robe-mode
  :END:

#+BEGIN_QUOTE
Robe is a code assistance tool that uses a Ruby REPL subprocess with your
application or gem code loaded, to provide information about loaded classes and
modules, and where each method is defined.
#+END_QUOTE

The general work flow with [[https://github.com/dgutov/robe][robe]] is:
- start an =inf-ruby= buffer by =C-c C-z=
- =M-x robe-start=

Basic features of robe:
- Jump to method definition
- Jump to =super= or a constructor called at point
- Jump to a module or class (provided it has at least one method defined)
- Display method documentation
- Display information about method called at point using ElDoc
- Method and constant name completion

#+NAME: robe-mode
#+BEGIN_SRC emacs-lisp
(defun bmaas/robe-mode-setup ())

(bmaas/install 'robe-mode 'bmaas/robe-mode-setup)
#+END_SRC

* Smartparens-ruby
  :PROPERTIES:
  :CUSTOM_ID: smartparens-ruby
  :END:

[[https://github.com/Fuco1/smartparens][smartparens]] is amazing, which deprecates [[https://github.com/qoobaa/ruby-electric][ruby-electric]]. In fact, it is so
amazing that one single [[https://github.com/Fuco1/smartparens/blob/master/smartparens-ruby][smartparens-ruby]] deprecates other two el-get packages:
[[https://github.com/adolfosousa/ruby-block.el][ruby-block]] and [[https://github.com/rejeep/ruby-end][ruby-end]]. Just enjoy it! Thanks [[https://github.com/Fuco1/smartparens/blob/master/smartparens-ruby][Matus Goljer]] again for this
amazing, elegant package.

#+NAME: smartparens-ruby
#+BEGIN_SRC emacs-lisp
(when (require 'smartparens nil 'noerror)
  (require 'smartparens-ruby))
#+END_SRC

* Rbenv
  :PROPERTIES:
  :CUSTOM_ID: rbenv
  :END:

By default, rbenv will designate the global ruby version via
=~/.rbenv/version=, so if =(file-exists-p "~/.rbenv/version")=, we know that
the user has installed and configured rbenv successfully, then we can install
emacs rbenv support. By default, oh-my-emacs enables =global-rbenv-mode=.

#+NAME: rbenv
#+BEGIN_SRC emacs-lisp
(defun bmaas/rbenv-setup ()
  (global-rbenv-mode t))

(when (file-exists-p "~/.rbenv/version")
  (bmaas/install 'rbenv 'bmaas/rbenv-setup))
#+END_SRC

* Yard-mode
  :PROPERTIES:
  :CUSTOM_ID: yard-mode
  :END:

[[https://github.com/pd/yard-mode.el][yard-mode]] is a minor mode that provide rudimentary support for fontifying [[http://yardoc.org/][YARD]]
tags and directives in ruby comments.

#+NAME: yard-mode
#+BEGIN_SRC emacs-lisp
(defun bmaas/yard-mode-setup ()
  (add-hook 'ruby-mode-hook 'yard-mode)
  (add-hook 'ruby-mode-hook 'eldoc-mode))

(bmaas/install 'yard-mode 'bmaas/yard-mode-setup)
#+END_SRC

* Rspec-mode

I frequently use rspec, and need some of its functionality
to run tests.

#+begin_src emacs-lisp :tangle yes
(defun bmaas/rspec-mode-setup ()
  (rspec-install-snippets)
  (setq rspec-use-rake-flag nil))

(bmaas/install 'rspec-mode 'bmaas/rspec-mode-setup)
#+end_src

* Fast test toggling

I often need to setup a quick test layout where I want source
in one screen and test code in another screen. Following
functions define this behaviour and bind it locally to <Leader>.

#+begin_src emacs-lisp :tangle yes
(defun bmaas/open-test-in-split-window ()
  (interactive)
  (delete-other-windows)
  (split-window-right)
  (rspec-toggle-spec-and-target))

(eval-after-load 'ruby-mode
  '(evil-leader/set-key-for-mode 'ruby-mode
     "." 'bmaas/open-test-in-split-window))
#+end_src

* Test bindings

I want to run tests quickly while developing in ruby. So
we set some local bindings.

#+begin_src emacs-lisp :tangle yes
(eval-after-load 'ruby-mode
  '(evil-leader/set-key-for-mode 'ruby-mode
     "tt" 'rspec-verify
     "ts" 'rspec-verify-single
     "ta" 'rspec-verify-all
     "td" 'rspec-disable-example
     "te" 'rspec-enable-example))
#+end_src
