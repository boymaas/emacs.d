#+TITLE: Clojure
#+OPTIONS: toc:2 num:nil ^:nil

* Clojure
  :PROPERTIES:
  :CUSTOM_ID: clojure
  :END:

[[http://www.clojure.org][Clojure]] is a modern Lisp on top of JVM, it is a member of the Lisp family of
languages. Clojure extends the code-as-data system beyond parenthesized lists
(s-expressions) to vectors and maps.

#+NAME: clojure
#+BEGIN_SRC emacs-lisp


(require 'thingatpt)

(defun thing-at-point-goto-end-of-integer ()
  "Go to end of integer at point."
  (let ((inhibit-changing-match-data t))
    ;; Skip over optional sign
    (when (looking-at "[+-]")
      (forward-char 1))
    ;; Skip over digits
    (skip-chars-forward "[[:digit:]]")
    ;; Check for at least one digit
    (unless (looking-back "[[:digit:]]")
      (error "No integer here"))))
(put 'integer 'beginning-op 'thing-at-point-goto-end-of-integer)

(defun thing-at-point-goto-beginning-of-integer ()
  "Go to end of integer at point."
  (let ((inhibit-changing-match-data t))
    ;; Skip backward over digits
    (skip-chars-backward "[[:digit:]]")
    ;; Check for digits and optional sign
    (unless (looking-at "[+-]?[[:digit:]]")
      (error "No integer here"))
    ;; Skip backward over optional sign
    (when (looking-back "[+-]")
        (backward-char 1))))
(put 'integer 'beginning-op 'thing-at-point-goto-beginning-of-integer)

(defun thing-at-point-bounds-of-integer-at-point ()
  "Get boundaries of integer at point."
  (save-excursion
    (let (beg end)
      (thing-at-point-goto-beginning-of-integer)
      (setq beg (point))
      (thing-at-point-goto-end-of-integer)
      (setq end (point))
      (cons beg end))))
(put 'integer 'bounds-of-thing-at-point 'thing-at-point-bounds-of-integer-at-point)

(defun thing-at-point-integer-at-point ()
  "Get integer at point."
  (let ((bounds (bounds-of-thing-at-point 'integer)))
    (string-to-number (buffer-substring (car bounds) (cdr bounds)))))
(put 'integer 'thing-at-point 'thing-at-point-integer-at-point)

(defun increment-integer-at-point (&optional inc)
  "Increment integer at point by one.

With numeric prefix arg INC, increment the integer by INC amount."
  (interactive "p")
  (let ((inc (or inc 1))
        (n (thing-at-point 'integer))
        (bounds (bounds-of-thing-at-point 'integer)))
    (delete-region (car bounds) (cdr bounds))
    (insert (int-to-string (+ n inc)))))

(defun decrement-integer-at-point (&optional dec)
  "Decrement integer at point by one.

With numeric prefix arg DEC, decrement the integer by DEC amount."
  (interactive "p")
  (increment-integer-at-point (- (or dec 1))))

(defun bmaas/inc-and-save ()
  (interactive)
  (increment-integer-at-point)
  (save-buffer))

(defun bmaas/dec-and-save ()
  (interactive)
  (decrement-integer-at-point)
  (save-buffer))

(defun bmaas/bind-dec-and-inc-save ()
  (define-key clojure-mode-map (kbd "ESC <up>") 'bmaas/inc-and-save)
  (define-key clojure-mode-map (kbd "ESC <down>") 'bmaas/dec-and-save))

;; (bmaas/bind-dec-and-inc-save)

(defun bmaas/cider-setup ()
  ;;(setq cider-repl-tab-command 'indent-for-tab-command)
  (setq cider-repl-pop-to-buffer-on-connect nil)
  (setq cider-popup-stacktraces t)
  (setq cider-repl-popup-stacktraces t)
  (setq cider-auto-select-error-buffer t)
  (setq nrepl-hide-special-buffers t)
  (setq nrepl-buffer-name-separator "-")
  (setq nrepl-buffer-name-show-port t)

  (add-hook 'clojure-mode-hook 'bmaas/bind-dec-and-inc-save)


  (add-hook 'clojure-mode-hook (lambda ()
    (eldoc-mode)))

  (add-hook 'clojurescript-mode-hook (lambda ()
    (eldoc-mode)))



  ;;(add-hook 'cider-repl-mode-hook #'company-mode)
  ;;(add-hook 'cider-mode-hook #'company-mode)

  ;; TODO: find cider-repl
  ;; (eval-after-load "cider-repl-mode"
  ;;   (define-key cider-repl-mode-map (kbd "C-l") 'cider-repl-clear-buffer))
  )

(bmaas/install 'cider 'bmaas/cider-setup)
#+END_SRC

* Clojure Drive CLJS Dom Decompiler

#+begin_src elisp

(defun bmaas/decompile-with-dso-coords-last-sexp-and-replace ()
  "Evaluate the expression preceding point and replace it with its result."
  (interactive)
  (let ((last-sexp (cider-last-sexp)))
    ;; we have to be sure the evaluation won't result in an error
    (nrepl-sync-request:eval last-sexp nil (cider-current-session))
    ;; seems like the sexp is valid, so we can safely kill it
    (backward-kill-sexp)
    (cider-interactive-eval last-sexp (cider-eval-print-handler))))

#+end_src


* CIDER

#+begin_src emacs-lisp :tangle yes
(setq cider-prompt-for-project-on-connect nil)


;; Does not work
;;(bmaas/install 'clojure-quick-repls 'bmaas/noop)


#+end_src

* Clojure Refector clj-refactor

A collection of simple clojure refactoring functions.

#+begin_src emacs-lisp :tangle yes

(defun cljr-create-test-file ()
  (interactive)
  (let* ((test-file (s-replace-all '(("/src/" . "/test/") (".clj" . "_test.clj"))
                                   (buffer-file-name)))
         (test-dir (file-name-directory test-file))
         (test-name (file-name-nondirectory test-file)))
    (make-directory test-dir :create-parents)
    (find-file-other-window test-file)
    (cljr--add-ns-if-blank-clj-file)
    (save-buffer)))

;; (defun cljr--create-missing-test-file (oldfun &rest args)
;;   (condition-case nil
;;       (funcall oldfun)
;;     ('error (save-window-excursion (cljr-create-test-file)) (funcall oldfun))))

;;(advice-add 'projectile-toggle-between-implementation-and-test :around
;;            #'cljr--create-missing-test-file)


(defun bmaas/clj-refactor-setup ()
  (add-hook 'clojure-mode-hook (lambda ()
                                 (clj-refactor-mode 1)))

  (add-hook 'clojure-mode-hook 'hs-minor-mode)

  (evil-leader/set-key-for-mode 'clojure-mode
    "rrf" 'cljr-rename-file
    "rru" 'cljr-replace-use
    "rau" 'cljr-add-use-to-ns
    "rar" 'cljr-add-require-to-ns
    "rai" 'cljr-add-import-to-ns
    "rsn" 'cljr-sort-ns
    "rsr" 'cljr-stop-referring
    "ril" 'cljr-introduce-let
    "rel" 'cljr-expand-let
    "red" 'cljr-extract-def
    "rec" 'cljr-extract-constant
    "ref" 'cljr-extract-function
    "rml" 'cljr-move-to-let
    "rmf" 'cljr-move-form

    ;; threading
    "rth" 'cljr-thread
    "rtf" 'cljr-thread-first-all
    "rtl" 'cljr-thread-last-all
    "ruw" 'cljr-unwind
    "rua" 'cljr-unwind-all

    ;; cycling
    "rcp" 'cljr-cycle-privacy
    "rcc" 'cljr-cycle-coll
    "rcs" 'cljr-cycle-stringlike
    "rci" 'cljr-cycle-if

    "rad" 'cljr-add-declaration
    "rdk" 'cljr-destructure-keys
    "rpc" 'cljr-project-clean

    ;; added
    "rap" 'cljr-add-project-dependency
    "rcn" 'cljr-clean-ns
    "rpf" 'cljr-promote-function
    "rrl" 'cljr-remove-let
    ))

(bmaas/install 'clj-refactor 'bmaas/clj-refactor-setup)

#+end_src


* Figwheel cljs-repl
#+begin_src emacs-lisp :tangle yes
(defun bmaas/cider-figwheel-repl ()
  (interactive)
  (save-some-buffers)
  (with-current-buffer (cider-current-repl-buffer)
    (goto-char (point-max))
    (insert "(require 'figwheel-sidecar.repl-api)
             (figwheel-sidecar.repl-api/cljs-repl)")
    (cider-repl-return)))

(defun bmaas/cider-node-repl ()
  (interactive)
  (save-some-buffers)
  (with-current-buffer (cider-current-repl-buffer)
    (goto-char (point-max))
    (insert "(require '[cljs.repl.node :as node]
                      '[cemerick.piggieback :as piggieback])
              (piggieback/cljs-repl (node/repl-env))")
    (cider-repl-return)))


(defun bmaas/cider-arena-app-state ()
  (interactive)
  (save-some-buffers)
  (cider--pprint-eval-form
   "(arena.app.state/build-state)"))


(defun bmaas/cider-decompile-dso-coords ()
  (interactive)
  (save-some-buffers)
  (cider--pprint-eval-form
   "(argos.decompiler/decompile-with-dso-coords
        @(argos.node-cursor/select-first
           @(:machine drive.page.fruit.wild-devil/machine)
        :.drag))"))
#+end_src


* Clojure Specjl test setup

When using speclj run this setup

#+BEGIN_SRC emacs-lisp :tangle no
;; test mode setup for speclj
(require 'clojure-test-mode)

;; Test navigation:
(defun clojure-in-tests-p ()
  (or (string-match-p "spec\." (clojure-find-ns))
      (string-match-p "/spec" (buffer-file-name))))

(defun clojure-test-for (namespace)
  "Returns the path of the test file for the given namespace."
  (let* ((namespace (clojure-underscores-for-hyphens namespace))
         (segments (split-string namespace "\\.")))
    (format "%sspec/%s_spec.clj"
            (file-name-as-directory
             (locate-dominating-file buffer-file-name "src/"))
            (mapconcat 'identity segments "/"))))

(defvar clojure-test-for-fn 'clojure-test-for)

(defun clojure-test-implementation-for (namespace)
  "Returns the path of the src file for the given test namespace."
  (let* ((namespace (clojure-underscores-for-hyphens namespace))
         (segments (split-string namespace "\\."))
         (namespace-end (split-string (car (last segments)) "_"))
         (namespace-end (mapconcat 'identity (butlast namespace-end 1) "_"))
         (impl-segments (append (butlast segments 1) (list namespace-end))))
    (format "%s/src/clj/%s.clj"
            (locate-dominating-file buffer-file-name "src/")
            (mapconcat 'identity impl-segments "/"))))

(defvar clojure-test-implementation-for-fn 'clojure-test-implementation-for)

(defun clojure-test-run-tests ()
  "Run all the tests in the current namespace."
  (interactive)
  (save-some-buffers nil (lambda () (equal major-mode 'clojure-mode)))
  (message "Testing...")
  (if (not (clojure-in-tests-p))
      (cider-load-file (buffer-file-name)))
  (save-window-excursion
    (if (not (clojure-in-tests-p))
        (clojure-jump-to-test))
    (clojure-test-clear)
    (cider-load-file (buffer-file-name))
    (message "Test namespace evaluated, look into repl for result")))
#+END_SRC

* Normal keybindings

Cider jump is disabled by a evil-mode mapping to evil-repeat function
there are many ways to fix this. One is to rebind the M-. to the cider jump
functoin, which would leave this mapping in place in all other normal modes.

Another would be to insert a custom keymap in the emulation mode maps, which
is a lot of work and would override the mapping also for every binding.

Simplest way is just to clear the binding by setting it to =nil= in the
evil-normal-state-map.

#+begin_src emacs-lisp :tangle yes
(defun bmaas/cider-local-keys ()
  (define-key evil-normal-state-map (kbd "M-.") nil))



(add-hook 'cider-mode-hook 'bmaas/cider-local-keys)
(add-hook 'clojure-mode-hook 'bmaas/cider-local-keys)
(add-hook 'clojurec-mode-hook 'bmaas/cider-local-keys)


#+end_src

* Evil keybindings

  Notice we are setting mode local bindings, so ;c stays available for
  others. The locals will override the normal leaders

#+begin_src emacs-lisp :tangle yes
(evil-leader/set-key-for-mode 'clojure-mode
  "cJ" 'cider-display-current-connection-info
  "cj" 'cider-connect
  "cF" 'bmaas/cider-figwheel-repl
  "cN" 'bmaas/cider-node-repl
  "cC" 'bmaas/cider-decompile-dso-coords
  "cqq" 'cider-quit
  "cqr" 'cider-restart
  "cef" 'cider-load-file
  "ceb" 'cider-eval-buffer
  "cer" 'cider-eval-region
  "cl" 'cider-load-buffer
  "cele" 'cider-eval-last-sexp
  "celp" 'cider-pprint-eval-last-sexp
  "celr" 'cider-eval-last-sexp-and-replace
  "cen" 'cider-eval-ns-form
  "cc" 'cider-eval-defun-at-point
  "cR" 'cider-switch-to-repl-buffer
  "cr" 'cider-rotate-connection
  "cn" 'cider-repl-set-ns
  "cd" 'cider-doc
  "cD" 'cider-grimoire
  "ca" 'cider-apropos
  "cA" 'cider-apropos-documentation
  "ci" 'cider-inspect
  "cm" 'cider-macroexpand-1
  "cM" 'cider-macroexpand-all
  "ctv" 'cider-toggle-trace-var
  "ctv" 'cider-toggle-trace-ns
  "c:" 'cider-read-and-eval
  "." 'projectile-toggle-between-implementation-and-test
  "t" 'cider-test-run-ns-tests
  "T" 'cider-test-run-test
  "CR" 'cider-find-and-clear-repl-buffer
  "A" 'bmaas/cider-arena-app-state
  )

;; Use the same evil leaders inside the derived major mode for
;; clojuerscript
(let ((mode-map (cdr (assoc 'clojure-mode evil-leader--mode-maps))))
  (push (cons 'clojurescript-mode mode-map) evil-leader--mode-maps)
  (push (cons 'clojurec-mode mode-map) evil-leader--mode-maps))

#+end_src
