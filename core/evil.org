#+TITLE: Evil setup
#+OPTIONS: toc:2 num:nil ^:nil

* Evil
  :PROPERTIES:
  :CUSTOM_ID: evil
  :END:

If you need to turn off evil temporarily for a single buffer, use
=M-x evil-local-mode= instead of =M-x evil-mode=, since the latter will turn
off evil-mode globally, which means, evil-mode will be turned off for the whole
Emacs session.

#+NAME: evil
#+BEGIN_SRC emacs-lisp
(defun bmaas/evil-setup ()
  (setq evil-auto-indent t)
  (setq evil-regexp-search t)
  (setq evil-want-C-i-jump t)
  ;; normal redo key
  (global-set-key (kbd "C-r") 'undo-tree-redo)

  (add-hook 'text-mode-hook 'turn-on-evil-mode)
  (add-hook 'prog-mode-hook 'turn-on-evil-mode)
  (add-hook 'comint-mode-hook 'turn-on-evil-mode)
  (add-hook 'Info-mode-hook 'turn-off-evil-mode))


(bmaas/install 'evil 'bmaas/evil-setup)
#+END_SRC

* Settings

#+begin_src emacs-lisp :tangle yes
;; DO NOT move cursor back after exiting insert state
(setq evil-move-cursor-back nil)
;; DO NOT highlight parens
(setq evil-highlight-closing-paren-at-point-states nil)

(setq show-paren-highlight-openparen nil)
#+end_src

* Evil state based modeline color

Colored modeline, for easy determiniation of mode we are in.
Got this from emacs-wiki as a snippet.

#+begin_src emacs-lisp :tangle yes
;; change mode-line color by evil state
(defvar bmaas/default-modeline-color (cons (face-background 'mode-line)
                                           (face-foreground 'mode-line)))

(defun bmaas/change-modeline-color-on-buffer-state ()
  (let ((color (cond ((minibufferp) bmaas/default-modeline-color)
                     ((evil-insert-state-p) '("black" . "#cccccc"))
                     ((evil-emacs-state-p)  '("black" . "blue"))
                     ((evil-motion-state-p)  '("black" . "Yellow"))
                     ;;((buffer-modified-p)   '("#006fa0" . "#cccccc"))
                     (t bmaas/default-modeline-color))))
    (set-face-background 'mode-line (car color))
    (set-face-foreground 'mode-line (cdr color))))

(add-hook 'post-command-hook 'bmaas/change-modeline-color-on-buffer-state)
#+end_src

* Evil-leader
  :PROPERTIES:
  :CUSTOM_ID: evil-leader
  :END:

Evil leader just provides the =<leader>= feature from Vim to evil, which
provides an easy way to bind keys under a variable prefix key. The default
binding of =<leader>= is =\=, which is not easy to reach, so I bind
it to =;=.

My choice for =;= has some limitations, since the =C-;= combination will
not be send by some terminals. Which has to do with the =modifyOtherKeys=
extention which has been introduced in later terminal implemenations.

iTerm2 which I use will not send the C-; combination.

http://manytricks.com/keycodes/ has an app to find
keycodes for your system.

#+NAME: evil-leader
#+BEGIN_SRC emacs-lisp
(defun bmaas/evil-leader-setup ()
  (evil-leader/set-leader ";")

  ; enable in all states
  (setq evil-leader/non-normal-prefix "C-")
  (setq evil-leader/in-all-states t)

  (unless (featurep 'helm)
    (evil-leader/set-key
      "e" 'find-file
      "b" 'switch-to-buffer))
  (eval-after-load "helm"
    (evil-leader/set-key
      "f" 'helm-for-files
      "F" 'projectile-find-file

      "g" 'projectile-vc

      "hp" 'helm-projectile
      "hl" 'helm-locate
      ;;"c" 'helm-colors
      "y" 'helm-show-kill-ring
      "ht" 'helm-top
      "hm" 'helm-man-woman
      "ha" 'helm-apropos
      "hr" 'helm-resume
      "hb" 'helm-bookmarks
      "hg" 'helm-do-grep

      "x" 'helm-M-x
      ;;"X" 'smex

      "b" 'helm-buffers-list

      ;; todo: maybe this can be done with advise?
      "eb" (lambda ()
             (interactive)
             (if (fboundp 'bmaas/persp-ibuffer)
                          (bmaas/persp-ibuffer)
                        (ibuffer)))
      "B" 'helm-buffers-list

      ;; custom
      ";" 'evil-buffer

      "qr" 'quickrun

      "el" (lambda () (interactive)
             (dired "."))

      ;;"c" 'evilnc-comment-or-uncomment-lines
      ))
  (eval-after-load "persp-mode"
    (evil-leader/set-key
      "ws" 'persp-switch
      "wkb" 'persp-remove-buffer
      "wab" 'persp-add-buffer
      "wS" 'persp-save-state-to-file
      "wL" 'persp-load-state-from-file
      "wK" 'persp-kill
      "wI" 'persp-import-buffers
      ))
  (eval-after-load "projectile"
    (evil-leader/set-key
      "p4f" 'projectile-find-file-other-window
      "p4t" 'projectile-find-implementation-or-test-other-window
      "pf" 'projectile-find-file
      "pT" 'projectile-find-test-file
      "pl" 'projectile-find-file-in-directory
      "pt" 'projectile-toggle-between-implementation-and-test
      "pg" 'projectile-grep
      "p4b" 'projectile-switch-to-buffer-other-window
      "pb" 'projectile-switch-to-buffer
      "po" 'projectile-multi-occur
      "pr" 'projectile-replace
      "pi" 'projectile-invalidate-cache
      "pR" 'projectile-regenerate-tags
      "pj" 'projectile-find-tag
      "pk" 'projectile-kill-buffers
      "pd" 'projectile-find-dir
      "pD" 'projectile-dired
      "pv" 'projectile-vc
      "pe" 'projectile-recentf
      "pa" 'projectile-ack
      "pA" 'projectile-ag
      "pc" 'projectile-compile-project
      "pp" 'projectile-test-project
      "pz" 'projectile-cache-current-file
      "ps" 'projectile-switch-project
      "pm" 'projectile-commander
      "ph" 'helm-projectile
      ))
  (eval-after-load "org-mode"
    (evil-leader/set-key
      "oa" 'org-agenda
      "oo" 'org-open-at-point
      "ols" 'org-store-link
      "oli" 'org-insert-link
      ))
  (eval-after-load "yasnippet"
    (evil-leader/set-key
      "is" 'yas-insert-snippet))
  (eval-after-load "expand-region"
    (progn
      (setq expand-region-contract-fast-key "z")
      (evil-leader/set-key "X" 'er/expand-region)))
  (eval-after-load "smartparens"
    (progn
      ;; Smartparens keybindings in pairs
      ;; TODO: make a helper out of this
      (setq bmaas/smartparens-keys
            '(
              "sf" sp-forward-sexp
              "sb" sp-backward-sexp

              "sd" sp-down-sexp
              "sD" sp-backward-down-sexp
              "s^" sp-beginning-of-sexp
              "s$" sp-end-of-sexp

              "su" sp-up-sexp
              "sU" sp-backward-up-sexp


              "sn" sp-next-sexp
              "sp" sp-previous-sexp

              "st" sp-transpose-sexp
              "sk" sp-kill-sexp
              "sK" sp-backward-kill-sexp
              "sy" sp-copy-sexp


              "s//" sp-splice-sexp
              "s/f" sp-splice-sexp-killing-forward
              "s/b" sp-splice-sexp-killing-backward
              "s/a" sp-splice-sexp-killing-around


              "ss" sp-forward-slurp-sexp
              "sr" sp-forward-barf-sexp

              "sS" sp-backward-slurp-sexp
              "sR" sp-backward-barf-sexp

              "sF" sp-forward-symbol
              "sB" sp-backward-symbol

              "s[" sp-select-previous-thing
              "s]" sp-select-next-thing


              "swr" sp-rewrap-sexp
              "swd" sp-unwrap-sexp
              "swb" sp-backward-unwrap-sexp

              "smt" sp-prefix-tag-object
              "smp" sp-prefix-pair-object

              "smc" sp-convolute-sexp

              "sma" sp-absorb-sexp
              "sme" sp-emit-sexp

              "smp" sp-add-to-previous-sexp
              "smn" sp-add-to-next-sexp

              "smj" sp-join-sexp
              "sms" sp-split-sexp

              "smr" sp-raise-sexp))

      (defun partition (l n)  ;"demo" grade, cursorily tested
        "Return a list of L's consecutive sublists of length N."
        (assert (zerop (mod (length l) n)))
        (loop for l on l by #'(lambda (l) (nthcdr n l)) collect (subseq l 0 n)))

      ;; undefine the normal s = which is substitute
      (define-key evil-normal-state-map (kbd "s") nil)

      ;; now map all smartparens actions for quick access to s-prefix
      (dolist (key-combo (partition bmaas/smartparens-keys 2))
        (let* ((key (first key-combo))
               (exp (second key-combo)))
          (define-key evil-normal-state-map (kbd key) exp)))))

  (evil-leader/set-key
    "'" 'comment-or-uncomment-region
    "k" 'kill-buffer
    "w" 'save-buffer)
  (global-evil-leader-mode)
  ;; Messages buffer does not get the leader because
  ;; it exists already. We just kill it so it opens again
  (kill-buffer "*Messages*")
)

(bmaas/install 'evil-leader 'bmaas/evil-leader-setup)

#+END_SRC

* Evil-everywhere - evil-mode integration

We prefer to be in evil mode in all kinds of buffers. Searching google I
encountered[[https://gitorious.org/evil/evil/source/8a9aeae5db3bbb19d2349b7de86d8de3c151e123:evil-integration.el][ Evil repos - integration]] which gives some hints on how to integrate.

** Emacs states to motion states

So to get the integration I want I move all the "emacs states" to the
evil-motion states. Then I move some common keys from the motion state map
to the normal state map so they won't conflict with normal behaviour.

Some buffers we don't want motion mode, like the buffers with composed
keymaps such as the magit-key-mode. Here we want to force emacs state.

For this it has to be removed from the motions-states list and added to
the emacs list state.

You can add these specific modes the the =bmaas/evil-emacs-state-modes=.

To add extra modes to the motions states just add entries to the variable
=bmaas/evil-motion-state-modes=.

#+begin_src emacs-lisp :tangle yes
(defvar bmaas/evil-emacs-state-modes)
(defvar bmaas/evil-motion-state-modes)
(defvar bmaas/evil-overriding-mode-maps)

(setq bmaas/evil-emacs-state-modes '(magit-key-mode
                                     magit-process-mode
                                     magit-branch-manager-mode
                                     org-agenda-mode
                                     Custom-mode
                                     ))

(setq bmaas/evil-motion-state-modes '(dired-mode
                                      grep-mode
                                      cider-inspect-mode
                                      cider-doc-mode
                                      cider-stacktrace-mode))

(defun bmaas/move-key (keymap-from keymap-to key)
  "Moves key binding from one keymap to another and delete from the old location. "
  (define-key keymap-to key (lookup-key keymap-from key))
  (define-key keymap-from key nil))

(defun bmaas/copy-key (keymap-from keymap-to key)
  "Moves key binding from one keymap to another and delete from the old location. "
  (define-key keymap-to key (lookup-key keymap-from key)))

(defun bmaas/evil-everywhere ()
     ;; all emacs mode modes beome motion modes
     (setq evil-motion-state-modes (append evil-emacs-state-modes
                                           evil-motion-state-modes
                                           bmaas/evil-motion-state-modes))
     (setq evil-emacs-state-modes '())

     ;; except for several modes we want to keep emacs
     (dolist (a-mode  bmaas/evil-emacs-state-modes)
           (setq evil-motion-state-modes (delq a-mode evil-motion-state-modes))
           (add-to-list 'evil-emacs-state-modes a-mode))

     ;; move many caught keys to normal map
     (bmaas/move-key evil-motion-state-map evil-normal-state-map (kbd "RET"))
     (bmaas/move-key evil-motion-state-map evil-normal-state-map " ")

     ;; wanna be able to enter evil-ex mode from motion state
     (bmaas/copy-key evil-normal-state-map evil-motion-state-map ":")
     (define-key evil-normal-state-map ":" 'evil-ex)
     (define-key evil-motion-state-map ":" 'evil-ex)

     ;; needed to activate settings
     (evil-mode))

;; need to run this after all modes are initialized. Otherwise some mode-maps
;; will not be available (eg. cider-inspector-mode-map)
(add-hook 'after-init-hook 'bmaas/evil-everywhere)

;; bmaas: initialize the eval-after-load forms, some files are autoloaded
;;        and some vars are not present at after-init time.
(defun bmaas/evil-intercept-motion-map-after-load (mode-base-name)
  "Makes an intercept map for motion state after loading the file
defined by `mode-base-name`. Map name is derived from mode-base-name

eg. cider-stacktrace => cider-stacktrace-mode-map"

  ;; note that to capture the mode* let variables inside the lambda
  ;; we need a lexical-let construct. Dynamic binding is default in emacs
  (let* ( ( mode (format "%s-mode" mode-base-name))
          ( mode-hook (format "%s-hook" mode))
          ( mode-map (format "%s-map" mode)))
    (eval-after-load mode-base-name
      `(progn
         (evil-make-intercept-map ,(intern mode-map))))))

(bmaas/evil-intercept-motion-map-after-load "cider-stacktrace")
(bmaas/evil-intercept-motion-map-after-load "cider-inspector")
(bmaas/evil-intercept-motion-map-after-load "dired")
(bmaas/evil-intercept-motion-map-after-load "magit")
#+end_src

** Ibuffer overrides

#+begin_src emacs-lisp :tangle yes
(eval-after-load 'ibuffer
  '(progn
    (evil-make-overriding-map ibuffer-mode-map 'motion)))
#+end_src

** Magit overrides

Enter motion mode as specified above, but make the magit-mode-map override,
the default motion keys.

#+begin_src emacs-lisp :tangle yes
(eval-after-load 'magit
  '(evil-make-overriding-map magit-mode-map 'motion))
#+end_src

** Dired overrides

And wdired-mode starts now in instert state, but I want in in normal
state!

#+begin_src emacs-lisp :tangle yes
;; wdired in normal state
(setq evil-insert-state-modes (delete 'wdired-mode evil-insert-state-modes))
(add-to-list 'evil-normal-state-modes 'wdired-mode)

(evil-leader/set-key-for-mode 'dired-mode "e" 'wdired-change-to-wdired-mode)

;; in dired the : is mapped to some epa stuff as a prefix key
;; we just want ex mode
(define-key dired-mode-map ":" nil)
#+end_src

** TODO this is probably more reasonable
  https://github.com/prooftechnique/.emacs.d/blob/master/config/jhenahan-evil.el
  https://github.com/edwtjo/evil-org-mode

* Evil-surround
  :PROPERTIES:
  :CUSTOM_ID: evil-surround
  :END:

#+NAME: evil-surround
#+BEGIN_SRC emacs-lisp
(bmaas/install 'evil-surround 'bmaas/noop)
#+END_SRC

* Ace-jump-mode
  :PROPERTIES:
  :CUSTOM_ID: ace-jump-mode
  :END:

[[https://github.com/winterTTr/ace-jump-mode][ace-jump-mode]] is a minor mode for Emacs, enabling fast/direct cursor movement
in current view. "You can move your cursor to ANY position (across window and
frame) in emacs by using only 3 times key press."

#+NAME: ace-jump-mode
#+BEGIN_SRC emacs-lisp
(defun bmaas/ace-jump-mode-setup ()
  (when (and (featurep 'evil) (featurep 'evil-leader))
    (evil-leader/set-key
      "jc" 'ace-jump-char-mode
      "jw" 'ace-jump-word-mode
      "jl" 'ace-jump-line-mode)))

(bmaas/install 'ace-jump-mode 'bmaas/ace-jump-mode-setup)
#+END_SRC

* Ack-and-a-half
  :PROPERTIES:
  :CUSTOM_ID: ack-and-a-ha
  :END:

Easy searching, and skipping binary files and ohers

#+NAME: ack-and-a-half
#+BEGIN_SRC emacs-lisp
(when (or (executable-find "ack") (executable-find "ack-grep"))
  (bmaas/install 'ack-and-a-half 'bmaas/noop))
#+END_SRC

* ag
  :PROPERTIES:
  :CUSTOM_ID: ag
  :END:

ag, [[https://github.com/ggreer/the_silver_searcher][the silver searcher]], a code searching tool similar to [[http://beyondgrep.com/][ack]] but much more
faster. It searches code abot 3-5x faster than ack, and "The command name is
33% shorter than ack, and all keys are on the home row!".

#+NAME: ag
#+BEGIN_SRC emacs-lisp
(when (executable-find "ag")
  (bmaas/install 'ag 'bmaas/noop))
#+END_SRC
