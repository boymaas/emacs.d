#+TITLE: Completion
#+OPTIONS: toc:nil num:nil ^:nil

* Hippie expand
=M-x hippie-expand= is a single command providing a variety of completions and
expansions. The following code segment comes from [[https://github.com/bbatsov/prelude][Emacs Prelude]].

#+name: hippie-expand
#+BEGIN_SRC emacs-lisp
;; hippie expand is dabbrev expand on steroids
(setq hippie-expand-try-functions-list '(try-expand-dabbrev
                                         try-expand-dabbrev-all-buffers
                                         try-expand-dabbrev-from-kill
                                         try-complete-file-name-partially
                                         try-complete-file-name
                                         try-expand-all-abbrevs
                                         try-expand-list
                                         try-expand-line
                                         try-complete-lisp-symbol-partially
                                         try-complete-lisp-symbol))
#+END_SRC

* Company mode

Company is a text completion framework for Emacs. The name stands for "complete
anything". It uses pluggable back-ends and front-ends to retrieve and display
completion candidates.

It comes with several back-ends such as Elisp, Clang, Semantic, Eclim,
Ropemacs, Ispell, CMake, BBDB, Yasnippet, dabbrev, etags, gtags, files,
keywords and a few others.

The CAPF back-end provides a bridge to the standard
completion-at-point-functions facility, and thus works with any major mode that
defines a proper completion function.

** Setup

#+begin_src emacs-lisp :tangle yes
(defun bmaas/company-mode-indent-or-complete ()
  (interactive)
  (if (looking-at "\\_>")
      (company-complete-common)
    (indent-according-to-mode)))

(defun bmaas/company-mode-setup ()
  ;; no automatic completion, faster typing is good
  (setq company-idle-delay nil)
  ;; trigger completion on TAB

  (global-set-key (kbd "TAB") 'bmaas/company-mode-indent-or-complete)

  ;; run global-company after complete of emacs is initialized
  (add-hook 'after-init-hook
            (lambda ()
              (global-company-mode)
              (define-key company-active-map [tab] 'company-complete-selection)
              (define-key company-active-map (kbd "TAB") 'company-complete-selection))))

(bmaas/install 'company-mode 'bmaas/company-mode-setup)
#+end_src


* Helm
  :PROPERTIES:
  :CUSTOM_ID: helm
  :END:

[[https://github.com/emacs-helm/helm][Helm]] is a incremental completion and selection narrowing framework for
emacs. It will help steer you in the right direction when you're looking for
stuff in Emacs (like buffers, files, etc). Helm is a fork of =anything.el=,
which clean up the legacy code in =anything.el= and provide a cleaner and more
modular tool.

To wrap your mind around the helm way, you need to remember a few key
bindings. When helm starts, remember:
- access the helm action menu with =TAB=. Maybe this is the most whirlwind
  turnaround since most name completion packages use =TAB= as completion
  key. Don't worry, helm doesn't need too much completion, since helm provides
  name completion by navigation instead by using =TAB= to complete character by
  character. Actually, the helm =TAB= brings you a new world, in which you
  combine several tasks into a series of successive keystrokes and get your job
  done.
- Use persistent actions with =C-z=.
- Mark candidate with =M-<SPACE>=, thus you can do batch processing through helm.

#+NAME: helm
#+BEGIN_SRC emacs-lisp
(defun bmaas/helm-setup ()
  (require 'helm-config)
  (setq helm-input-idle-delay 0.2)
  (helm-mode t)
  (setq helm-locate-command
        (case system-type
          ('gnu/linux "locate -i -r %s")
          ('berkeley-unix "locate -i %s")
          ('windows-nt "es %s")
          ('darwin "mdfind -name %s %s")
          (t "locate %s")))
  (global-set-key (kbd "C-x c g") 'helm-do-grep)
  (global-set-key (kbd "C-x c o") 'helm-occur)
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-f") 'helm-find-files))

(bmaas/install 'helm 'bmaas/helm-setup)

#+END_SRC

* Yasnippet
  :PROPERTIES:
  :CUSTOM_ID: yasnippet
  :END:

[[https://github.com/capitaomorte/yasnippet][YASnippet]] is "Yet Another Snippet" expansion system for Emacs. It is inspired by
[[http://macromates.com/][TextMate]]'s templating syntax. You can see the [[http://capitaomorte.github.io/yasnippet/][intro and tutorial]] or watch this
[[http://www.youtube.com/watch?v%3DvOj7btx3ATg][video on youtube]] to get some basic knowledge.

TODO:
- Check out, and integrate from: [[https://github.com/AndreaCrotti/yasnippet-snippets][yasnippet-snippets]]

#+NAME: yasnippet
#+BEGIN_SRC emacs-lisp
(eval-after-load 'popup
  '(progn
     (define-key popup-menu-keymap (kbd "M-n") 'popup-next)
     (define-key popup-menu-keymap (kbd "TAB") 'popup-next)
     (define-key popup-menu-keymap (kbd "<tab>") 'popup-next)
     (define-key popup-menu-keymap (kbd "<backtab>") 'popup-previous)
     (define-key popup-menu-keymap (kbd "M-p") 'popup-previous)))

(defun yas-popup-isearch-prompt (prompt choices &optional display-fn)
  (when (featurep 'popup)
    (popup-menu*
     (mapcar
      (lambda (choice)
        (popup-make-item
         (or (and display-fn (funcall display-fn choice))
             choice)
         :value choice))
      choices)
     :prompt prompt
     ;; start isearch mode immediately
     :isearch t)))

(defun bmaas/yasnippet-setup ()
  (setq yas-prompt-functions
        '(yas-popup-isearch-prompt
          yas-no-prompt))
  (yas-global-mode)
  (yas-load-directory "~/.emacs.d/snippets"))

(bmaas/install 'popup 'bmaas/noop)
(bmaas/install 'yasnippet 'bmaas/yasnippet-setup)
#+END_SRC
