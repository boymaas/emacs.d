#+TITLE: Org mode customizations
#+OPTIONS: toc:nil num:nil ^:nil

Org mode customizations, there are primaraly usefull settings
making my org-mode experience more pleasurable.

* Evil-Org: custom keymap

Evil with org mode gives some behaviour that is confusing, I want to be able to
TAB in normal mode, and have it working as expected.

Inspired by: [[https://github.com/edwtjo/evil-org-mode/blob/master/evil-org.el][evil-org-mode]]

#+begin_src emacs-lisp :tangle yes
(define-minor-mode evil-org-mode
  "Buffer local minor mode for evil-org"
  :init-value nil
  :lighter " EvilOrg"
  :keymap (make-sparse-keymap)
  :group 'evil-org)

(add-hook 'org-mode-hook 'evil-org-mode)

(evil-define-key 'normal evil-org-mode-map
  "gh" 'outline-up-heading
  "gj" 'org-forward-heading-same-level
  "gk" 'org-backward-heading-same-level
  "gl" 'outline-next-visible-heading
  "t" 'org-todo
  "T" '(lambda () (interactive) (org-insert-todo-heading nil) (evil-append 1))
  "H" 'org-beginning-of-line
  "L" 'org-end-of-line
  "$" 'org-end-of-line
  "^" 'org-beginning-of-line
  "-" 'org-cycle-list-bullet
  (kbd "TAB") 'org-cycle)

(defun evil-org-mode/set-leader-keys ()
  (evil-leader/set-key-for-mode 'org-mode
    "t" 'org-show-todo-tree
    "<" 'org-shiftmetaleft
    ">" 'org-shiftmetaright
    "ci" 'org-clock-in
    "co" 'org-clock-out))

(add-hook 'org-mode-hook 'evil-org-mode/set-leader-keys)
#+end_src

* Windmove compatibility

Windmove uses =shift-<cusrsor>= keys to navigate. Org-mode also
uses this paradigm.

Shifted cursor keys will then execute Org commands in the following contexts:
- on a headline, changing TODO state (left/right) and priority (up/down)
- on a time stamp, changing the time
- in a plain list item, changing the bullet type
- in a property definition line, switching between allowed values
- in the BEGIN line of a clock table (changing the time block).
Outside these contexts, the commands will throw an error.

All this functionality is handled by the =org-shiftright= and =org-shiftleft=
functions.

We will remove this binding from the org-mode map so the normal windmove
functionality will work.

#+begin_src emacs-lisp :tangle yes
(eval-after-load "org-mode"
  (progn
    (dolist (shift-cursor-key '("S-<left>"
                                "S-<right>"
                                "S-<up>"
                                "S-<down>"))
      (let ((org-mode-function (lookup-key org-mode-map (kbd shift-cursor-key))))
        (define-key org-mode-map (kbd shift-cursor-key) nil)
        (define-key org-mode-map (kbd (format "C-%s" shift-cursor-key)) org-mode-function)))))
#+end_src

* Settings
** Fast access to org-files

We need to update org-files regularly so nice to be
able to select them quicly

#+begin_src emacs-lisp :tangle yes
(setq org-directory "~/Sites/planning/")

(defun org-path (fname)
  (concat org-directory fname))


(defun gtd ()
    (interactive)
    (find-file (org-path "gtd.org")))
(defun journal ()
    (interactive)
    (find-file (org-path "journal.org")))

(evil-leader/set-key
  "og" 'gtd
  "oj" 'journal)
#+end_src

** Customizations

Several customization of org-mode behaviour. Collected throught time reflecting
personal pereferences.

#+begin_src emacs-lisp :tangle yes

(require 'helm-org)

;; log transfer to done state, so it's visible in the
;; timeline
(setq org-log-done t)

;; clockcum format for org-agenda-report
(setq org-time-clocksum-format '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))

;; uset completion in org-mode
(setq org-completion-use-ido t)

;; don't auto indent my files
(setq org-startup-indented nil)

;; indent my org files, true indenting
(setq org-adapt-indentation nil)

; Refile targets include this file and any file contributing to the agenda - up to X levels deep
; To let path completion on refileing work with helm mode, the org-outline-path-complete-in-steps must
; be nil, so we see nice full paths.
(setq org-refile-targets '((buffer-file-name :maxlevel . 2) (org-agenda-files :maxlevel . 2))
      org-refile-use-outline-path 'file ; either nil, file, full-file-path
      org-outline-path-complete-in-steps nil)


;; some handy settings
(setq org-timeline-show-empty-dates t)
(setq org-insert-mode-line-in-empty-file t)

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d)")
              (sequence "WAITING(w)" "SOMEDAY(S)" "PROJECT(P)" "|" "CANCELLED(c)"))))

;; no logging on keyword state switching
;; find the windows annorying
(setq org-todo-log-states nil)

#+end_src

** Org clocking

Normal time format is in days, we want to bill hours so I adapted the
clocksum format to a more usefull one.

#+begin_src emacs-lisp :tangle yes
; Set default column view headings: Task Effort Clock_Summary
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")
;; Fortmat of org-clock-report CLOCKSUMS need hours ..
(setq org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
;; Resume clocking tasks when emacs is restarted
(org-clock-persistence-insinuate)
;; Yes it's long... but more is better ;)
(setq org-clock-history-length 35)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change task state to STARTED when clocking in
(setq org-clock-in-switch-to-state "STARTED")
;; Save clock data and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Don't clock out when moving task to a done state
(setq org-clock-out-when-done nil)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist 'history)
; global Effort estimate values
(setq org-global-properties (quote (("Effort_ALL" . "0:10 0:30 1:00 2:00 3:00 4:00 5:00 6:00 8:00 12:00 16:00 20:00 24:00"))))
#+end_src

** Capture

Capture lets you quickly store notes with little interruption of your work
flow. Org's method for capturing new items is heavily inspired by John Wiegley
excellent remember.el package. Up to version 6.36, Org used a special setup for
remember.el, then replaced it with org-remember.el. As of version 8.0,
org-remember.el has been completely replaced by org-capture.el.

#+begin_src emacs-lisp :tangle yes
(setq org-capture-templates
'(("t" "Todo" entry
  (file+headline "~/Sites/planning/gtd.org" "Refile")
  "* TODO %^{Brief Description} %^g\n%?\nAdded: %U\nLink: %a")
 ("j" "Journal" entry
  (file+headline "~/Sites/planning/journal.org" "")
  "\n* %^{topic} %T \n%i%c%?\nLink: %a\n")
 ("n" "Note" entry
  (file+headline "~/Sites/planning/gtd.org" "Notes")
  "\n* %^{topic} %T \n%i%?\n")
 ("s" "Someday" entry
  (file+headline "~/Sites/planning/gtd.org" "")
  "\n* %^{topic} %T \n%i%?\n")))

(evil-leader/set-key
  "or" 'org-capture)

#+end_src

** Agenda settings

Org agenda is the main point to get an overview of appointments and work to be
be done.

#+begin_src emacs-lisp :tangle yes
(setq org-agenda-files '("~/Sites/planning/gtd.org" "~/Sites/planning/nationale_beeldbank.org" "~/Sites/planning/crypto_trader.org" "~/Sites/planning/sellsimple.org" "~/Sites/planning/fortunebet.org"))


(setq org-agenda-custom-commands
      (quote (("P" "Projects" tags "/!PROJECT" ((org-use-tag-inheritance nil)))
              ("s" "Started Tasks" todo "STARTED" ((org-agenda-todo-ignore-with-date nil)))
              ("c" "Active Project" tags-todo "active&boy" ((org-agenda-todo-ignore-with-date nil)))
              ("w" "Tasks waiting on something" tags "WAITING" ((org-use-tag-inheritance nil)))
              ("r" "Refile New Notes and Tasks" tags "@refile" ((org-agenda-todo-ignore-with-date nil)))
              ("d" "Daily Overview"
               ((agenda)
                (tags-todo "@refile")
                (tags-todo "@tasks")
                (todo "TODO")
                (tags "@daily+LEVEL=2/-DONE")))
              ("n" "Notes" tags "note" nil))))


; some extra configs
(add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))

;; Include agenda archive files when searching for things
(setq org-agenda-text-search-extra-files (quote (agenda-archives)))

;; Agenda view tweaks

;; Show all future entries for repeating tasks
(setq org-agenda-repeating-timestamp-show-all t)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;; Sorting order for tasks on the agenda
(setq org-agenda-sorting-strategy
      (quote ((agenda time-up priority-down effort-up category-up)
              (todo priority-down)
              (tags priority-down))))

;; Start the weekly agenda today
(setq org-agenda-start-on-weekday nil)

;; Custom agenda keys
;;(define-key org-agenda-keymap (kbd "w") 'org-agenda-refile)

;; (backing-up policy)
(run-at-time "00:59" 3600 'org-save-all-org-buffers)

#+end_src

** Appointments

#+begin_src emacs-lisp :tangle yes
; Erase all reminders and rebuilt reminders for today from the agenda
(defun bmaas/agenda-to-appt ()
  (interactive)
  (setq appt-time-msg-list nil)
  (org-agenda-to-appt))

; Rebuild the reminders everytime the agenda is displayed
(add-hook 'org-finalize-agenda-hook 'bmaas/agenda-to-appt)

; If we leave Emacs running overnight - reset the appointments one minute after midnight
(run-at-time "24:01" nil 'bmaas/agenda-to-appt)

; This is at the end of my .emacs - so appointments are set up when Emacs starts
(bmaas/agenda-to-appt)

; Activate appointments so we get notifications
(appt-activate t)
#+end_src

** Publishing

For now we only publish fortunebet planning to online server.

#+begin_src emacs-lisp :tangle yes
(setq org-publish-project-alist
      '(("fortunebet"
         ;; Path to your org files.
         :base-directory "~/Sites/planning/"
         :base-extension "NON-EXISTING"
         :include [ "fortunebet.org" ]
         :recursive nil
         :publishing-function org-html-publish-to-html
         ;; Path to your publishing directory.
         :publishing-directory "/ssh:framino@framino:~/public"
         :headline-levels 5
         )))

;; strange thing this has to be set to nil otherwise
;; export won't happen
(setq org-export-copy-to-kill-ring nil)
#+end_src

** Faces

#+begin_src emacs-lisp :tangle yes
(defun evil-org-mode/set-faces ()
  (custom-set-faces
   '(org-todo ((t (:background "black" :foreground "red" :weight bold))))))

(add-hook 'org-mode-hook 'evil-org-mode/set-faces)
#+end_src
