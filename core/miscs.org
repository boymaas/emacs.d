#+TITLE: Miscs
#+OPTIONS: toc:nil num:nil ^:nil

* Enable some dangerous commands

By default, the narrowing commands are considered to be dangerous, we just
remove the dangerous tag here.

#+BEGIN_SRC emacs-lisp
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+END_SRC

* Random Number
  :PROPERTIES:
  :CUSTOM_ID: random-number
  :END:

#+NAME: random-number
#+BEGIN_SRC emacs-lisp
;; Seed the random-number generator
(random t)
#+END_SRC

* Rainbow Delimiters
  :PROPERTIES:
  :CUSTOM_ID: rainbow-delimiters
  :END:

"RainbowDelimiters is a "rainbow parentheses"-like mode which highlights
parentheses, brackets, and braces according to their depth. Each successive
level is highlighted in a different color. This makes it easy to spot matching
delimiters, orient yourself in the code, and tell which statements are at a
given depth."

#+NAME: rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(defun bmaas/rainbow-delimiters-setup ()
  (global-rainbow-delimiters-mode))

(bmaas/install 'rainbow-delimiters 'bmaas/rainbow-delimiters-setup)
#+END_SRC

* Transparently Open Compressed Files
  :PROPERTIES:
  :CUSTOM_ID: auto-compression-mode
  :END:

"Auto Compression mode is a global minor mode.  When enabled, compressed files
are automatically uncompressed for reading, and compressed when writing."

#+NAME: auto-compression-mode
#+BEGIN_SRC emacs-lisp
(auto-compression-mode t)
#+END_SRC

* Allowing Opening Images
  :PROPERTIES:
  :CUSTOM_ID: auto-image-file-mode
  :END:

"Toggle visiting of image files as images (Auto Image File mode)."

#+NAME: auto-image-file-mode
#+BEGIN_SRC emacs-lisp
(auto-image-file-mode t)
#+END_SRC

* Outline mode
  :PROPERTIES:
  :CUSTOM_ID: outline
  :END:

Outline mode is the root of org-mode, while =outline-minor-mode= is still
useful with other major modes when browsing large files. You can get the
overall structure with =outline-minor-mode=, so enabled
=outline-minor-mode= for all programming modes by adding =outline-minor-mode=
to =prog-mode-hook=.

By default, outline minor mode provides special key bindings on the =C-c @=
prefix, which, IMHO, is a little cumbersome to type. You can rebind to other
keys if you like.

You can get detailed information about =outline-mode= by typing =C-h F
outline-mode=, and =C-h b= will bring you a full list of keybindings, including
keybindings for =outline-minor-mode=.

#+NAME: outline
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook
          (lambda ()
            (outline-minor-mode t)))

;; (add-hook 'outline-minor-mode-hook
;;           (lambda ()
;;             (local-set-key (kbd "C-c C-o")
;;                            outline-mode-prefix-map)))

#+END_SRC

* Magit
  :PROPERTIES:
  :CUSTOM_ID: magit
  :END:

#+BEGIN_QUOTE
In many ways you can just see git as a filesystem - it's content-
addressable, and it has a notion of versioning, but I really really
designed it coming at the problem from the viewpoint of a _filesystem_
person (hey, kernels is what I do), and I actually have absolutely _zero_
interest in creating a traditional SCM system.

-- Linus Torvalds, http://marc.info/?l=linux-kernel&m=111314792424707
#+END_QUOTE

#+NAME: magit
#+BEGIN_SRC emacs-lisp
(defun bmaas/magit-setup ()
  ;; magit-status is the entry point
  (add-hook 'git-rebase-mode-hook
            (lambda ()
              (evil-local-mode -1))))

(if (executable-find "git")
    (bmaas/install 'magit 'bmaas/magit-setup))
#+END_SRC

* Visual-line-mode
  :PROPERTIES:
  :CUSTOM_ID: visual-line-mode
  :END:

[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Visual-Line-Mode.html][Visual line mode]] is a new mode in Emacs 23. It provides support for editing by
visual lines. It turns on word-wrapping in the current buffer, and rebinds C-a,
C-e, and C-k to commands that operate by visual lines instead of logical lines.

[[file:ome-basic.org::*Auto-fill%20Mode][As you know]], we have =turn-on-auto-fill= for =text-mode= and =prog-mode= and
all derived modes, which may make it useless to turn on =visual-line-mode= most
of the time. But we still turn on it globally to make it a fallback when
=auto-fill-mode= was disabled by users.

#+NAME: visual-line-mode
#+BEGIN_SRC emacs-lisp
(global-visual-line-mode t)
#+END_SRC

* Projectile
  :PROPERTIES:
  :CUSTOM_ID: projectile
  :END:

This library provides easy project management and navigation. The concept of a
project is pretty basic - just a folder containing special file. Currently git,
mercurial, darcs and bazaar repos are considered projects by default. So are
lein, maven, sbt, rebar and bundler projects. If you want to mark a folder
manually as a project just create an empty .projectile file in it. Some of
Projectile's features:

- jump to a file in project
- jump to a directory in project
- jump to a file in a directory
- jump to a project buffer
- jump to a test in project
- toggle between code and its test
- jump to recently visited files in the project
- switch between projects you have worked on
- kill all project buffers
- replace in project
- multi-occur in project buffers
- grep in project
- regenerate project etags or gtags (requires gtags).
- visit project in dired
- run make in a project with a single key chord

#+NAME: projectile
#+BEGIN_SRC emacs-lisp
(defun bmaas/projectile-setup ()
  (projectile-global-mode)
  (setq projectile-enable-caching nil)
  (setq projectile-completion-system 'grizzl)

  (global-set-key (kbd "C-x c h") 'helm-projectile))

(bmaas/install 'grizzl 'bmaas/noop)
(bmaas/install 'projectile 'bmaas/projectile-setup)
#+END_SRC

* Smartparens
  :PROPERTIES:
  :CUSTOM_ID: smartparens
  :END:

#+BEGIN_QUOTE
Smartparens is modern minor mode for Emacs that /deals with parens pairs and
tries to be smart about it/. It is a unification and enhancement effort to
combine functionality of several existing packages in a single, common and
straightforward way (and most of all compatible). These packages include
[[https://github.com/capitaomorte/autopair][autopair]], [[http://code.google.com/p/emacs-textmate/][textmate]], [[https://github.com/rejeep/wrap-region][wrap-region]], [[http://emacswiki.org/emacs/ParEdit][paredit]] and others with similar
philosophies. It also adds support for many more features. [[https://github.com/Fuco1/smartparens/wiki#wiki-what-is-this-package-about?][Here's]] a highlight
of some features, for a complete list and detailed documentation look in the
[[https://github.com/Fuco1/smartparens/wiki#wiki-information-for-new-users][manual]].

For the complete picture of what is it about, visit the [[https://github.com/Fuco1/smartparens/wiki][documentation wiki]].
#+END_QUOTE

#+NAME: smartparens
#+BEGIN_SRC emacs-lisp
(defun bmaas/create-newline-and-enter-sexp (&rest _ignored)
  "Open a new brace or bracket expression, with relevant newlines and indent. "
  (previous-line)
  (indent-according-to-mode)
  (forward-line)
  (newline)
  (indent-according-to-mode)
  (forward-line -1)
  (indent-according-to-mode))

(defun bmaas/smartparens-setup ()
  ;; global
  (require 'smartparens-config)
  (setq sp-autoskip-closing-pair 'always)
  (setq sp-navigate-close-if-unbalanced t)
  (smartparens-global-mode t)

  ;; turn on smartparens-strict-mode on all lisp-like mode
  (dolist (sp--lisp-mode-hook
           (mapcar (lambda (x)
                     (intern (concat (symbol-name x) "-hook")))
                   sp--lisp-modes))
    (add-hook sp--lisp-mode-hook
              'smartparens-strict-mode)
    ;; inferior-emacs-lisp-mode-hook is an alias of ielm-mode-hook
    ;; and it will be overrided when you first start ielm
    (add-hook 'ielm-mode-hook
              'smartparens-strict-mode))

  ;; do not highlights matching pairs, we have showparens
  (show-smartparens-global-mode -1)

  ;; pair management
  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)

  ;; markdown-mode
  (sp-with-modes '(markdown-mode gfm-mode rst-mode)
    (sp-local-pair "*" "*" :bind "C-*")
    (sp-local-tag "2" "**" "**")
    (sp-local-tag "s" "```scheme" "```")
    (sp-local-tag "<"  "<_>" "</_>" :transform 'sp-match-sgml-tags))

  ;; tex-mode latex-mode
  (sp-with-modes '(tex-mode plain-tex-mode latex-mode)
    (sp-local-tag "i" "\"<" "\">"))

  ;; html-mode
  (sp-with-modes '(html-mode sgml-mode)
    (sp-local-pair "<" ">"))

  ;; lisp modes
  (sp-with-modes sp--lisp-modes
    (sp-local-pair "(" nil :bind "C-("))

  (dolist (mode '(c-mode c++-mode java-mode js2-mode sh-mode css-mode))
    (sp-local-pair mode
                   "{"
                   nil
                   :post-handlers
                   '((bmaas/create-newline-and-enter-sexp "RET")))))

(bmaas/install 'smartparens 'bmaas/smartparens-setup)
#+END_SRC

* Quickrun
  :PROPERTIES:
  :CUSTOM_ID: quickrun
  :END:

Just as its name, quickrun let you run your program in a really quick
way. Just run it, without thinking about too much other chores.

#+NAME: quickrun
#+BEGIN_SRC emacs-lisp
(bmaas/install 'quickrun 'bmaas/noop)
#+END_SRC

* Diminish
  :PROPERTIES:
  :CUSTOM_ID: diminish
  :END:

#+BEGIN_QUOTE
"When we diminish a mode, we are saying we want it to continue doing its work
for us, but we no longer want to be reminded of it. It becomes a night worker,
like a janitor; it becomes an invisible man; it remains a component, perhaps an
important one, sometimes an indispensable one, of the mechanism that maintains
the day-people's world, but its place in their thoughts is diminished, usually
to nothing. As we grow old we diminish more and more such thoughts, such
people, usually to nothing."

-- Will Mengarini in diminish.el
#+END_QUOTE

Check the variable =minor-mode-alist= and diminish minor modes as you
like.

#+NAME: diminish
#+BEGIN_SRC emacs-lisp
(defun bmaas/diminish-setup ()
  ;; diminish some builtin mode
  (eval-after-load "abbrev"
    '(diminish 'abbrev-mode))

  (eval-after-load 'simple
    '(progn
       ;; diminish auto-fill-mode
       (diminish 'auto-fill-function)
       ;; https://github.com/xiaohanyu/oh-my-emacs/issues/36
       (when (string< emacs-version "24.3.50")
         (diminish 'global-visual-line-mode))
       (diminish 'visual-line-mode)))

  (eval-after-load "outline"
    '(diminish 'outline-minor-mode))

  (eval-after-load "eldoc"
    '(diminish 'eldoc-mode))

  ;; diminish third-party mode
  (eval-after-load "elisp-slime-nav"
    '(diminish 'elisp-slime-nav-mode))

  (eval-after-load "helm"
    '(diminish 'helm-mode))

  (eval-after-load "projectile"
    '(diminish 'projectile-mode "Prjl"))

  (eval-after-load "undo-tree"
    '(diminish 'undo-tree-mode))

  (eval-after-load "company"
    '(diminish 'company-mode))

  (eval-after-load "yasnippet"
    '(diminish 'yas-minor-mode))


  (eval-after-load "git-gutter-fringe"
    '(Diminish 'git-gutter-mode)))

(bmaas/install 'diminish 'bmaas/diminish-setup)
#+END_SRC
